
These are alpha-quality hacks to convert object and monster graphics preference files from another variant (standard Angband, in my case) to your own variant without spending more time than you have to.  This is NOT production code, so use only after reading, understanding, and correcting!




/*
 Convert files from hexadecimal to decimal or '+'decimal encoding (see <<sangband>>/src/
 files.c:"read_byte_or_char()").  Makes editing graphics prefs much easier for people 
 without hexadecimal minds.  When working on graphics, I also used indexed versions of 
 the graphics files to further speed up the boring task of hunting for glyphs.  I loathe 
 tedium...
 */


/*
 * Top line is input, bottom line is output.
 *
 * S:0x34:0x91/0x8C
 * S:52:145/140
 * S:52:+17/+12
 */
static void file_convert(cptr name)
{
	FILE *fff;
	FILE *ffp;

	char fff_path[1024];
	char ffp_path[1024];
	char buf[2048];
	char out[2048];
	char tmp[80];

	int fd_new;
	int n;

	int i;


	/* Build the filename */
	path_build(fff_path, sizeof(fff_path), ANGBAND_DIR_PREF, name);

	/* Build the filename */
	path_build(ffp_path, sizeof(ffp_path), ANGBAND_DIR_PREF, "dumpdata.prf");



	/* Open or make a new file */
	fd_new = fd_open("dumpdata.prf", O_WRONLY);

	if (fd_new < 0)
	{
		fd_new = fd_make("dumpdata.prf", 0644);
	}
	if (fd_new < 0)
	{
		msg_print("Failed to open file.");
		return;
	}

	/* Close it */
	fd_close(fd_new);


	/* Re-Open the files */
	fff = my_fopen(fff_path, "r");

	ffp = my_fopen(ffp_path, "w");

	/* Oops */
	if (!(fff && ffp))
	{
		msg_print("Failed to open file.");
		return;
	}


	/* Process the input file */
	while (0 == my_fgets(fff, buf, sizeof(buf)))
	{
		char *t = buf;
		char *u = out;

		/* Assume no text */
		out[0] = '\0';

		/* Scan the string */
		while (*t)
		{
			if (((*t == ':') || (*t == '/')) && (*(t+1) == '0'))
			{
				*u++ = *t++;

				for (i = 0; i < 80; i++)
				{
					if (!*(t+i)) break;
					if ((*(t+i) == ':') || (*(t+i) == '/')) break;

					tmp[i] = *(t+i);
				}

				if (i == 0) continue;

				tmp[i] = '\0';

				n = strtol(tmp, NULL, 0);

				if (n >= 128) strcpy(tmp, format("+%d", n - 128));
				else          strcpy(tmp, format("%d", n));

				t += i;

				for (i = 0; tmp[i]; i++) *u++ = tmp[i];
			}
			else
			{
				*u++ = *t++;
			}
		}
		*u = '\0';

		/* Save the data to file */
		my_fputs(ffp, out, sizeof(out));
	}

	/* Close both files */
	my_fclose(fff);
	my_fclose(ffp);
}





/*
 Take another variant's pref file, renumber (but don't resort) objects and monsters with 
 names similar[!] to entities in your variant.  Clearly mark those that don't match.

!) warning - see if an identical test works better for your purposes
 */



typedef struct obj_struct obj_struct;

struct obj_struct
{
	byte tval;
	cptr text;
};


/*
 * Tvals and descriptions of object groups.
 */
static obj_struct object_group[] =
{
	{ TV_FOOD,        "mushroom of " },
	{ TV_POTION,      "potion of " },
	{ TV_SCROLL,      "scroll of " },
	{ TV_RING,        "ring of " },
	{ TV_AMULET,      "amulet of " },
	{ TV_WAND,        "wand of " },
	{ TV_STAFF,       "staff of " },
	{ TV_ROD,         "rod of " },
	{ 0,              NULL }
};




static void file_convert(cptr name)
{
	FILE *fff;
	FILE *ffp;

	char fff_path[1024];
	char ffp_path[1024];
	char buf[2048];
	char buf2[2048];
	char out[2048];
	char tmp[128];

	int i, k;


	/* Build the filename */
	path_build(fff_path, sizeof(fff_path), ANGBAND_DIR_PREF, name);

	/* Build the filename */
	path_build(ffp_path, sizeof(ffp_path), ANGBAND_DIR_PREF, "dumpdata.prf");



	/* Open the files */
	fff = my_fopen(fff_path, "r");

	ffp = my_fopen(ffp_path, "w");

	/* Oops */
	if (!(fff && ffp))
	{
		msg_print("Failed to open file.");
		return;
	}


	/* Process the input file */
	while (0 == my_fgets(fff, buf, sizeof(buf)))
	{
		char *s;
		char *t = buf2;
		char *u = out;
		int tval = 0;
		int index = -1;
		bool flag = TRUE;

		my_fputs(ffp, buf, sizeof(buf));

		if (buf[0] != '#')
		{
			continue;
		}

		/* Get the next line, stop if none */
		if (my_fgets(fff, buf2, sizeof(buf2))) break;

		if (!strchr("RK", buf2[0]))
		{
			my_fputs(ffp, buf2, sizeof(buf2));
			continue;
		}

		/* Get a useable string out of "buf" */
		for (i = 2; buf[i]; i++) buf[i - 2] = buf[i];
		buf[i - 2] = '\0';

		if (!buf[0])
		{
			my_fputs(ffp, buf2, sizeof(buf2));
			continue;
		}


		strcpy(out, buf);
		strlower(out);

		if (buf2[0] == 'K')
		{
			for (tval = 0, i = 0;;i++)
			{
				if (!object_group[i].tval) break;

				if (strstr(out, object_group[i].text)) tval = object_group[i].tval;
			}

			for (k = z_info->k_max - 1; k > 0; k--)
			{
				object_kind *k_ptr = &k_info[k];

				if ((tval > 0) && (k_ptr->tval != tval)) continue;

				strcpy(tmp, k_name + k_ptr->name);
				for (s = tmp; *s; s++) xchar_trans_hook(s, ASCII);
				strlower(tmp);

				if (strstr(tmp, out))
				{
					index = k;
					break;
				}
			}
		}

		else if (buf2[0] == 'R')
		{
			for (k = z_info->r_max - 1; k > 0; k--)
			{
				monster_race *r_ptr = &r_info[k];

				strcpy(tmp, r_name + r_ptr->name);
				for (s = tmp; *s; s++) xchar_trans_hook(s, ASCII);
				strlower(tmp);

				if (streq(out, tmp))
				{
					index = k;
					break;
				}
			}
		}

		if (index < 0)
		{
			strcat(buf2, " XXXX");
			my_fputs(ffp, buf2, sizeof(buf2));
			continue;
		}


		t = buf2;


		/* Assume no text */
		out[0] = '\0';


		/* Scan the string */
		while (*t)
		{
			if ((flag) && (*t == ':'))
			{
				flag = FALSE;

				*u++ = *t++;

				for (i = 0; i < 80; i++)
				{
					if (!*(t+i)) break;
					if ((*(t+i) == ':') || (*(t+i) == '/')) break;
				}
				if (i == 0) continue;

				t += i;

				strcpy(tmp, format("%d", index));

				for (i = 0; tmp[i]; i++) *u++ = tmp[i];
			}
			else
			{
				*u++ = *t++;
			}
		}
		*u = '\0';

		/* Save the data to file */
		my_fputs(ffp, out, sizeof(out));
	}


	/* Close both files */
	my_fclose(fff);
	my_fclose(ffp);
}








/*
 Given
 1) a pref file with monsters (or with a few code changes, other entities) 
 already fully converted to use another set of graphics (16x16, for example), and: 

 2) another variant's pref file for monsters, for a different graphics mode (32x32, say), then:

 Apply the new graphics preferences to all matching monsters.  Mark all monsters that 
 don't match (so you can do them by hand).  THIS CODE NEEDS WORK.

 The second file has to have corrected indexes; the output of the above function (more-or-less touched up) will work fine.
 */
static void file_convert(void)
{
	FILE *fff;
	FILE *ffp;
	FILE *ffo;

	char fff_path[1024];
	char ffp_path[1024];
	char ffo_path[1024];
	char buf[2048];
	char buf2[2048];
	char out[2048];
	bool flag;

	int k;


	/* Build the filename */
	path_build(fff_path, sizeof(fff_path), ANGBAND_DIR_PREF, "1616.prf");

	/* Build the filename */
	path_build(ffp_path, sizeof(ffp_path), ANGBAND_DIR_PREF, "dump.prf");

	/* Build the filename */
	path_build(ffo_path, sizeof(ffo_path), ANGBAND_DIR_PREF, "output.prf");


	/* Open the files */
	fff = my_fopen(fff_path, "r");
	ffo = my_fopen(ffo_path, "w");


	/* Process the base file */
	while (0 == my_fgets(fff, buf, sizeof(buf)))
	{
		int index = 0;
		int num;

		if (buf[0] != '#') continue;

		/* Get the next line, stop if none */
		if (my_fgets(fff, buf2, sizeof(buf2))) break;

		/* Look for a pref line */
		if (buf2[0] != 'R') continue;

		/* Paranoia */
		if (!buf2[1]) continue;

		/* Scan the string (skip the leading "R:") */
		for (k = 2; k < 10; k++)
		{
			if (!buf2[k]) break;
			if (!isdigit(buf2[k])) break;

			out[k-2] = buf2[k];
		}
		out[k-2] = '\0';

		/* Save extracted data as a number */
		index = strtol(out, NULL, 0);

		/* Open the mod file */
		ffp = my_fopen(ffp_path, "r");

		flag = FALSE;

		/* Process the mod file */
		while (0 == my_fgets(ffp, ffo_path, sizeof(ffo_path)))
		{
			/* Look for a pref line */
			if (ffo_path[0] != 'R') continue;

			/* Skip if marked */
			if (strstr(ffo_path, "XXX")) continue;
			if (index != 0) message_add(format("index = %d", index), MSG_GENERIC);
			/* Scan the string (skip the leading "R:") */
			for (k = 2; k < 10; k++)
			{
				if (!ffo_path[k]) break;
				if (!isdigit(ffo_path[k])) break;

				out[k-2] = ffo_path[k];
			}
			out[k-2] = '\0';

			/* Save extracted data as a number */
			num = strtol(out, NULL, 0);

			/* Insist on matching index */
			if (index != num) continue;

			flag = TRUE;
			break;
		}

		my_fclose(ffp);

		/* Save this monster's pref entry */
		fprintf(ffo, buf);
		fprintf(ffo, "\n");
		fprintf(ffo, flag ? ffo_path : buf2);
		fprintf(ffo, flag ? "\n\n" : "    XXXX\n\n");
	}

	/* Close both files */
	my_fclose(fff);

	my_fclose(ffo);
}



A find-and-replace expression to turn entries in "flavor.txt" into graphic prefs.  This expression requires that your editor understand regular expressions (if it doesn't, it's costing you valuable time and should be swapped out).  We start with white rings:

Find what:  N:\([^:]+\).+\nG:=:w\nD:\(.+\)\n
Replace with: \n# \2\nL:\1:+4\\+0\n     /* graphic at position 4, 0) */


or you can always write your own pharsing code... :-)

